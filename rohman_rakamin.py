# -*- coding: utf-8 -*-
"""Rohman_rakamin.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B5gqhX1FLtfKozX7C6nu7I3m-CQygZWP
"""

import pandas as pd
import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf
import seaborn as sns
import statsmodels.api as sm

"""Membaca data CSV"""

#Load File
df_customer = pd.read_csv('/content/Case Study - Customer.csv', delimiter = ',')
df_product = pd.read_csv('/content/Case Study - Product.csv', delimiter = ';')
df_store = pd.read_csv('/content/Case Study - Store.csv', delimiter = ';')
df_transaction = pd.read_csv('/content/Case Study - Transaction.csv', delimiter = ';')

df_customer

df_product

df_store

df_transaction

df_customer.isnull().sum()

df_store.isnull().sum()

df_product.isnull().sum()

df_product.isnull().sum()
df_transaction.isnull().sum()

df_customer['Income'] = df_customer['Income'].astype('float64')

df_store['Latitude'] = df_store['Latitude'].astype('float64')
df_store['Longitude'] = df_store['Longitude'].astype('float64')

"""Menggabungkan data"""

df_merge = pd.merge(df_customer, df_transaction, on = 'CustomerID')
df_merge = pd.merge(df_merge, df_product.drop(columns = 'Price'), on = 'ProductID')
df_merge = pd.merge(df_merge, df_store, on = 'StoreID')
df_merge.head()

# Konversi kolom 'tanggal' menjadi tipe data date
df_merge['Date'] = pd.to_datetime(df_merge['Date'], format='%d/%m/%Y')

df_merge.head()

df = df_merge.groupby('Date').agg({'Qty':'sum'}).reset_index()
df

plt.figure(figsize=(12,5))
sns.pairplot(df,x_vars=['Qty'],y_vars=['Date'],height= 5,kind='scatter')
plt.xlabel('Kuantitas Total')
plt.ylabel('Penjualan Harian')
plt.title('scatterplot antara total quantity dan penjualan harian')
plt.show()

df.dropna(subset='Qty',inplace=True)

x=df['Qty']
x.head

y = df['Date']
y.head

from sklearn.model_selection import train_test_split

fig, ax = plt.subplots(figsize=(12, 5))
sns.lineplot(x = 'Date', y = 'Qty', data = df)
plt.tight_layout()

df

from statsmodels.tsa.seasonal import seasonal_decompose
regression = seasonal_decompose(df)

# Plot Result
fig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, figsize = (12, 8), sharex = True)
regression.observed.plot(ax = ax1)
ax1.set_ylabel('Observ')
regression.trend.plot(ax = ax2)
ax2.set_ylabel('Tren')
regression.seasonal.plot(ax = ax3)
ax3.set_ylabel('Season')
regression.resid.plot(ax = ax4)
ax4.set_ylabel('Residu')

plt.tight_layout()

train_dataset = int(len(df) * 0.9)
train_data, test_data = df.iloc[:train_dataset], df.iloc[train_dataset:]

train_data

test_data

def rmse(y_train, y_pre):
  print(f'RMSE Value: {mean_squared_error(y_train, y_pre)**0.5}')
def rsquare(y_train, y_pre):
  print(f'R-squared Value: {r2_score(y_train, y_pre)}')
def eval(y_train, y_pre):
  rmse(y_train, y_pre)
  rsquare(y_train, y_pre)
  print(f'MAE Value: {mean_absolute_error(y_train, y_pre)}')

order = (0,0,0)
seasonal_order = (0, 1, 1, 6)
model = sm.tsa.SARIMAX(train_data['Qty'], order = order, seasonal_order = seasonal_order)
fit_qty = model.fit()
print(fit_qty.summary())

model = sm.tsa.SARIMAX(df['Qty'], order = (0, 0, 0), seasonal_order = (1, 1, 0, 6))
fit = model.fit()
print(fit.summary())

forecast_length = 31
result = fit.get_forecast(forecast_length)
result_arima = result.conf_int()
result_arima['forecasted Qty'] = fit.predict(start = result_arima.index[0],
                                                      end = result_arima.index[-1])
result_arima['Date'] = pd.date_range(start = '2023-01-01', end = '2023-01-31')
result_arima.set_index('Date', inplace = True)
result_arima.head()

plt.figure(figsize = (12,8))
plt.plot(train_data['Qty'])
plt.plot(test_data['Qty'], color = 'red')
plt.plot(result_arima['forecasted Qty'], color = 'b', label = 'ARIMA Forecasted')
plt.legend()

plt.tight_layout()

df= df_merge.groupby('CustomerID').agg({'TransactionID':'count',
                                                 'Qty':'sum',
                                                 'TotalAmount':'sum'}).reset_index()
df.head()

df.isnull().sum()

plt.figure(figsize=(15,3))
plt.subplot(1,2,1)
sns.histplot(df['TransactionID'], color ='r', kde = True)
plt.title('Distribusi Transaksi', fontsize = 16)
plt.xlabel('transaksi', fontsize=12)
plt.ylabel('Frekuensi', fontsize=12)

plt.figure(figsize=(15,3))
plt.subplot(1,2,1)
sns.histplot(df['Qty'], color ='b', kde = True)
plt.title('Distribusi Kuantitas', fontsize = 16)
plt.xlabel('Quantity', fontsize=12)
plt.ylabel('Frekuensi', fontsize=12)

plt.figure(figsize=(15,3))
plt.subplot(1,2,1)
sns.histplot(df['TotalAmount'], color ='navy', kde = True)
plt.title('Distribusi Total Pendapatan', fontsize = 16)
plt.xlabel('Total Pendapatan', fontsize=12)
plt.ylabel('Frekuensi', fontsize=12)

plt.show()

sns.lmplot(x='Qty',y='TotalAmount',data=df, fit_reg=False, hue='TransactionID', height=5, palette='Dark2')
plt.title('Distribusi Total Pendapatan dan kuantitas berdasarkan transaksi', fontsize = 16)
plt.xlabel('Total Pendapatan', fontsize=12)
plt.ylabel('Frekuensi', fontsize=12)
plt.show()

from pandas.core.common import random_state
from sklearn.cluster import KMeans
x1 = df[['Qty','TotalAmount']]
wcss = []
for n in range (1,11):
  model1 =KMeans(n_clusters=n, init='k-means++', n_init = 10, max_iter=300, tol=0.0001, random_state=100)
  model1.fit(x1)
  wcss.append(model1.inertia_)
print(wcss)

plt.figure(figsize=(8,3))
plt.plot(list(range(1,11)), wcss, color='black', marker='o', linewidth=2, markersize=12, markerfacecolor='navy', markeredgecolor='m')
plt.title('Wcss Vs Banyaknya Cluster', fontsize = 16)
plt.xlabel('Jumlah Cluster', fontsize=12)
plt.ylabel('Wcss', fontsize=12)

#membuat clustering yang opsional
model1 =KMeans(n_clusters=3, init='k-means++', n_init = 10, max_iter=300, tol=0.0001, random_state=100)
model1.fit(x1)
label1=model1.labels_
centroids1=model1.cluster_centers_

plt.figure(figsize=(11,6))
sns.set_style('white')
plt.scatter(x=df['TransactionID'], y =df['Qty'], c=label1, cmap='winter')
plt.scatter(x= centroids1[:,0],y=centroids1[:, 1], s=300,c='r' )
plt.title('Segmentasi pelanggan berdasarkan Total Pembelian ', fontsize = 16)
plt.xlabel('kuantitas', fontsize=12)
plt.ylabel('Transaksi', fontsize=12)